#+TITLE:     Fun with the Linux Kernel
#+AUTHOR:    Aaron Bedra
#+EMAIL:     aaron@aaronbedra.com
#+LANGUAGE:  en

* Fun with the Linux Kernel					      :slide:
* Have you ever wanted to build something that required hardware interaction? :slide:
* Let's have some fun!						      :slide:
file:allyourbase.jpeg
* The Linux Kernel can be a pretty boring place unless you are into that kind of thing, so lets head over to joystick land :slide:
* First, let's grab the documentation				      :slide:
#+begin_src sh
  sudo pacman -S linux-docs
  /usr/src/linux-3.4.9-1-ARCH/Documentation/input/joystick-api.txt >
  joystick.c
#+end_src
* Good news! There isn't much there. Let's just copy the docs into a source file and implement :slide:
* Initialization						      :slide:
#+begin_src fundamental
  Open the joystick device following the usual semantics (that is, with
  open). Since the driver now reports events instead of polling for
  changes, immediately after the open it will issue a series of
  synthetic events (JS_EVENT_INIT) that you can read to check the
  initial state of the joystick.

  By default, the device is opened in blocking mode.

  int fd = open ("/dev/js0", O_RDONLY);
#+end_src
* Implementation 						      :slide:
#+begin_src c
  int open_joystick(char *device_name) {
    int joystick_fd = -1;

    if (device_name == NULL) return joystick_fd;

    joystick_fd = open(device_name, O_RDONLY | O_NONBLOCK);

    if (joystick_fd < 0) {
      printf("Could not locate joystick device %s\n", device_name);
      return joystick_fd;
    }

    return joystick_fd;
  }
#+end_src
* Trying it out							      :slide:
#+begin_src c
  int main() {
    int result = open_joystick("/dev/input/js1");
    printf("Result was %d\n", result);
    return 0;
  }
#+end_src
#+begin_src sh
  $ gcc joystick.c -o joystick
  $ ./joystick
  Result was 3
#+end_src
#+begin_src sh
  $ ./joystick
  Could not locate joystick device /dev/input/js1
  Result was -1
#+end_src
* Event Reading							      :slide:
#+begin_src fundamental
  struct js_event e;
  read (fd, &e, sizeof(struct js_event));

  where js_event is defined as

  struct js_event {
          __u32 time;     // event timestamp in milliseconds
          __s16 value;    // value
          __u8 type;      // event type
          __u8 number;    // axis/button number
  };

If the read is successful, it will return sizeof(struct js_event),
unless you wanted to read more than one event per read as
described in section 3.1.
#+end_src
* Implementation						      :slide:
#+begin_src c
  int read_event(int joystick_fd, struct js_event *jse) {
    int bytes;

    bytes = read(joystick_fd, jse, sizeof(*jse));

    if (bytes == -1) return 0;
    if (bytes == sizeof(*jse)) return 1;

    printf("Unexpected bytes from joystick:%d\n", bytes);

    return -1;
  }
#+end_src
* Testing it out						      :slide:
#+begin_src c
  int main() {
    int fd, result;
    struct js_event jse;
    fd = open_joystick("/dev/input/js1");

    while (1) {
      result = read_event(fd, &jse);
      usleep(1000);
      if (result == 1)
        printf("Event: time %8u, value %8hd, type: %3u, axis/button: %u\n",
               jse.time, jse.value, jse.type, jse.number);
    }

    return 0;
  }
#+end_src
* What it looks like						      :slide:
#+begin_src sh
  $ gcc joystick.c -o joystick
  $ ./joystick
  Event: time 1455917905, value        0, type: 129, axis/button: 0
  Event: time 1455917905, value        0, type: 129, axis/button: 1
  Event: time 1455917908, value        0, type: 129, axis/button: 2
  Event: time 1455917908, value        0, type: 129, axis/button: 3
  Event: time 1455917908, value        0, type: 129, axis/button: 4
  ... Rest of initialization ...
  Event: time 1455921538, value        1, type:   1, axis/button: 3
  Event: time 1455921642, value        0, type:   1, axis/button: 3
  Event: time 1455924832, value   -32767, type:   2, axis/button: 1
  Event: time 1455924938, value        0, type:   2, axis/button: 1
#+end_src
* There is a detailed explanation of what each of the members of the =js_event= struct actually means that we won't cover here :slide:
* Reading							      :slide:
#+begin_src fundamental
  If you open the device in blocking mode, a read will block (that is,
  wait) forever until an event is generated and effectively read. There
  are two alternatives if you can't afford to wait forever (which is,
  admittedly, a long time;)

          a) use select to wait until there's data to be read on fd, or
             until it timeouts. There's a good example on the select(2)
             man page.

          b) open the device in non-blocking mode (O_NONBLOCK)
#+end_src
* Non-Blocking Reads						      :slide:
#+begin_src fundamental
  If read returns -1 when reading in O_NONBLOCK mode, this isn't
  necessarily a "real" error (check errno(3)); it can just mean there
  are no events pending to be read on the driver queue. You should read
  all events on the queue (that is, until you get a -1).

  For example,

          while (1) {
                  while (read (fd, &e, sizeof(struct js_event)) > 0) {
                          process_event (e);
                  }
                  // EAGAIN is returned when the queue is empty
                  if (errno != EAGAIN) {
                          // error
                  }
                  // do something interesting with processed events
          }
#+end_src
* Cleaning up our test program					      :slide:
#+begin_src c
  int main() {
    int fd, result;
    struct js_event jse;
    fd = open_joystick("/dev/input/js1");

    while (1) {
      while (read(fd, &jse, sizeof(jse)) > 0) {
        printf("Event: time %8u, value %8hd, type: %3u, axis/button: %u\n",
               jse.time, jse.value, jse.type, jse.number);
      }
    }

    return 0;
  }
#+end_src
* Why?								      :slide:
#+begin_src fundamental
  One reason for emptying the queue is that if it gets full you'll start
  missing events since the queue is finite, and older events will get
  overwritten.

  The other reason is that you want to know all what happened, and not
  delay the processing till later.

  ...

  [As for version 1.2.8, the queue is circular and able to hold 64
   events. You can increment this size bumping up JS_BUFF_SIZE in
   joystick.h and recompiling the driver.]
#+end_src
* Identifying the device					      :slide:
#+begin_src fundamental
  The joystick driver defines the following ioctl(2) operations.

                                  // function               3rd arg
          #define JSIOCGAXES      // get number of axes     char
          #define JSIOCGBUTTONS   // get number of buttons  char
          #define JSIOCGVERSION   // get driver version     int
          #define JSIOCGNAME(len) // get identifier string  char
          #define JSIOCSCORR      // set correction values  &js_corr
          #define JSIOCGCORR      // get correction values  &js_corr

  For example, to read the number of axes

          char number_of_axes;
          ioctl (fd, JSIOCGAXES, &number_of_axes);
#+end_src
* Implementation						      :slide:
#+begin_src c
  int main() {
    int fd, version, axes=0, buttons=0;
    char name[128];
    struct js_event jse;
    fd = open_joystick("/dev/input/js1");

    ioctl(fd, JSIOCGAXES, &axes);
    ioctl(fd, JSIOCGBUTTONS, &buttons);
    ioctl(fd, JSIOCGVERSION, &version);
    ioctl(fd, JSIOCGNAME(sizeof(name)), &name);

    printf("Name: %s Axes: %d Buttons: %d Version: %d\n", name, axes, buttons, version);

    return 0;
  }
#+end_src
* The results							      :slide:
#+begin_src sh
  $ gcc -g joystick.c -o joystick
  $ ./joystick
  Name: USB Gamepad  Axes: 2 Buttons: 10 Version: 131328
#+end_src
* Putting it all together					      :slide:
  - With our experimentation out of the way, we can build a complete example program. It should perform the following:
    - Exit if the device is not found
    - Read and display the device info
    - Read from the device buffer and display the event
      - On an axis event, display direction
      - On a button event, display button number
* Complete implementation					      :slide:
#+begin_src c
  #include <stdlib.h>
  #include <stdio.h>
  #include <unistd.h>
  #include <linux/joystick.h>

  int open_joystick(char *device_name) {
  int fd = -1;

   if (device_name == NULL) {
     return fd;
   }

   fd = open(device_name, O_RDONLY | O_NONBLOCK);

   if (fd < 0) {
     printf("Could not locate joystick device %s\n", device_name);
     exit(1);
   }

   return fd;
  }

  void print_device_info(int fd) {
    int axes=0, buttons=0;
    char name[128];

    ioctl(fd, JSIOCGAXES, &axes);
    ioctl(fd, JSIOCGBUTTONS, &buttons);
    ioctl(fd, JSIOCGNAME(sizeof(name)), &name);

    printf("%s\n  %d Axes %d Buttons\n", name, axes, buttons);
  }

  void process_event(struct js_event jse) {
    if (jse.type == 2) {
      if (jse.number == 0) {
        if (jse.value < 0) {
          printf("LEFT\n");
        } else if (jse.value > 0) {
          printf("RIGHT\n");
        }
      } else {
        if (jse.value < 0) {
          printf("UP\n");
        } else if (jse.value > 0) {
          printf("DOWN\n");
        }
      }
    }

    if (jse.type == 1 && jse.value > 0) {
      printf("%d\n", jse.number);
    }
  }

  int main() {
    int fd;
    struct js_event jse;

    fd = open_joystick("/dev/input/js1");
    print_device_info(fd);

    while (1) {
      while (read(fd, &jse, sizeof(jse)) > 0) {
        process_event(jse);
      }
    }

    return 0;
  }
#+end_src
* The final test! 						      :slide:
#+begin_src sh
  $ ./complete
  USB Gamepad
    2 Axes 10 Buttons
  UP
  UP
  DOWN
  DOWN
  LEFT
  RIGHT
  LEFT
  RIGHT
  2
  1
  2
  1
  8
  9
#+end_src


#+TAGS: slide(s)

#+STYLE: <link rel="stylesheet" type="text/css" href="common.css" />
#+STYLE: <link rel="stylesheet" type="text/css" href="screen.css" media="screen" />
#+STYLE: <link rel="stylesheet" type="text/css" href="projection.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="presenter.css" media="presenter" />

#+BEGIN_HTML
<script type="text/javascript" src="org-html-slideshow.js"></script>
#+END_HTML

# Local Variables:
# org-export-html-style-include-default: nil
# org-export-html-style-include-scripts: nil
# End:
